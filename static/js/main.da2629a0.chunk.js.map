{"version":3,"sources":["logo.svg","components/Fetch/index.module.css","components/Fetch/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","input","submit","loadingOrError","dataFetchReducer","state","action","type","Object","objectSpread","isLoading","error","data","payload","Error","FetchAndDisplay","_ref2","search","_useState5","useState","_useState6","slicedToArray","query","setQuery","_useFetch","initialUrl","initialData","_useState","hits","_useState2","_useState3","_useState4","url","setUrl","_useReducer","useReducer","_useReducer2","dispatch","useEffect","didCancel","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","axios","sent","t0","message","stop","apply","this","arguments","fetchData","doFetch","useFetch","react_default","createElement","Fragment","style","width","onSubmit","e","preventDefault","concat","className","styles","value","onChange","target","color","map","item","key","objectID","href","rel","title","App","src","logo","alt","Fetch","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da2629a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Fetch_input__xd3dl\",\"submit\":\"Fetch_submit__2k5Uj\",\"loadingOrError\":\"Fetch_loadingOrError__39okM\"};","/*\nA good indicator that they belong together is that\nthey are used one after another (e.g. setIsError,\nsetIsLoading). Letâ€™s combine all three of them\nwith a Reducer Hook instead.\n*/\n\n// useReducer == do similar things together as a group\n\nimport React, { useState, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\n\nimport styles from \"./index.module.css\";\n\n// grouped state\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return {\n        ...state,\n        isLoading: true,\n        error: \"\"\n      };\n    case \"FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload\n      };\n    case \"FETCH_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n    default:\n      throw new Error(\"dunno what to do with this condition\");\n  }\n};\n\nconst useFetch = (initialUrl, initialData) => {\n  const INIT = { hits: [] };\n  const [data, setData] = useState(initialData || INIT);\n  const [url, setUrl] = useState(\n    initialUrl || \"http://hn.algolia.com/api/v1/search?query=redux\"\n  );\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    // dataFetchReducer is the action\n    // this here is the initial state\n    isLoading: false,\n    error: \"\",\n    data: initialData\n  });\n\n  useEffect(() => {\n    let didCancel = false;\n\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_INIT\" });\n\n      try {\n        const result = await axios(url);\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n        }\n      } catch (e) {\n        if (!didCancel) {\n          dispatch({ type: \"FETCH_FAILURE\", payload: e.message });\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      // if it unmounts, this returns true\n      // thereby skipping FETCH_SUCCESS / FETCH_FAILURE\n      didCancel = true;\n    };\n  }, [url]);\n\n  const doFetch = url => {\n    setUrl(url);\n  };\n\n  return { ...state, doFetch };\n};\n\nconst FetchAndDisplay = ({ search }) => {\n  const [query, setQuery] = useState(\"redux\");\n  const { data, isLoading, error, doFetch } = useFetch(\n    \"http://hn.algolia.com/api/v1/search?query=redux\",\n    { hits: [] }\n  );\n\n  const LoadingOrEror = () => {\n    if (!isLoading && !error) {\n      return null;\n    } else if (isLoading && !error) {\n      return <div>Loading...</div>;\n    } else if (error) {\n      return <div style={{ color: \"red\" }}>{error}</div>;\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    <>\n      <form\n        style={{ width: \"100%\" }}\n        onSubmit={e => {\n          e.preventDefault();\n          doFetch(`http://hn.algolia.com/api/v1/search?query=${query}`);\n        }}\n      >\n        <input\n          className={styles.input}\n          type=\"text\"\n          value={search || query}\n          onChange={e => setQuery(e.target.value)}\n        />\n        <button className={styles.submit} type=\"Submit\">\n          Search\n        </button>\n      </form>\n\n      <div className={styles.loadingOrError}>\n        <LoadingOrEror />\n      </div>\n\n      <ul>\n        {data.hits.map(item => (\n          <li key={item.objectID}>\n            <a href={item.url} target=\"_blank\" rel=\"noopener noreferrer\">\n              {item.title}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default FetchAndDisplay;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Fetch from \"./components/Fetch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <Fetch />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}